爬虫分支牵扯到的分支管理较少，复习一下git。

版本控制简单来说就是用于管理多人协同开发项目的技术。

仓库：
    受版本控制的所有文件修订历史的共享数据库
工作空间：
    （本地硬盘或Unix 用户帐户上编辑的文件副本）本地的文件夹，文件。
工作树/区：
    工作区中包含了仓库的工作文件，可以修改的内容和提交更改作为新的 提交到仓库。
暂存区：
    暂存区是工作区用来提交更改前 可以暂时存放工作区的变化。  索引是暂存区的一种术语。

       add           commit
工作区------》暂存区----------》版本库


冲突：
    多人对同一文件进行更改，并将这些更改提交到仓库中。
合并：
    将某分支上的更改联接到此主干或同为主干的另一个分支。
修订：
    表示代码的一个版本状态，Git通过SHA1 hash 算法表示的ID来标识不同的版本。

常见的版本控制器有Git， Svn
Svn属于集中版本控制：所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改。
    所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本。不联网的话，用户就看不到历史版本。

Git属于分布式版本控制：所有版本信息仓库全部同步到本地的每个用户。本地就可以查看所有版本历史，离线本地提交。
    只用在联网的时候push到相应的服务区或者其他用户那里。

Git 是目前世界上最先进的分布式版本控制系统。
    优点：
        分布式开发，强调个体。
        公共服务器压力和数据量都不会太大。
        速度快，灵活
        任意两个开发者之间可以很容易的解决冲突
        离线工作
    缺点：
        模式更复杂一点，代码保密性差。

git 本地有三个工作区域：
    工作目录（平时放项目代码的地方）
    暂存区 用于临时存放你该懂的代码，事实上他只是一个文件，保存即将提交到文件列表 信息
    仓库区  就死活安全存放数据的文职，这里有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本。
    远程仓库  托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换

你的项目和项目同级的隐藏文件夹 .git（包含暂存区，仓库区） 包含了所有的内容


Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。
WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。
.git：存放Git管理信息的目录，初始化仓库的时候自动创建。
ndex/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。
Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。
Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。
他们之间的关系见pic_1


工作流程一般是这样的：
    在工作目录中添加，修改文件
    将需要进行版本控制的文件放入暂存区域
    将暂存区域的文件提交到git仓库
因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)
详情见pic_2


